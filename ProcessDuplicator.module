<?php

namespace ProcessWire;

require_once(__DIR__ . DIRECTORY_SEPARATOR . 'Classes/DupUtil.php');

class ProcessDuplicator extends Process
{
  protected $dupmod = null;

  public static function getModuleInfo()
  {
    $package = json_decode(file_get_contents(__DIR__ . "/package.json"));

    return array(
      'title'     => 'Duplicator - Packages Manager',
      'summary'     => 'ðŸ“¦ Manage your backups/packages built with Duplicator inside ProcessWire.',
      'version'     => $package->version,
      'author'     => 'flydev',
      'icon'       => 'clone',
      'href'       => 'https://processwire.com/talk/topic/15345-duplicator-backup-and-move-sites/',
      'permission'  => 'duplicator',
      'permissions' => array(
        'duplicator' => 'Run the Duplicator module'
      ),
      'page'       => array(
        'name' => 'duplicator',
        'parent' => 'setup',
        'title' => 'Duplicator'
      ),
      'require'     => 'Duplicator',
      'autoload'    => function () {
        return (wire('page')->process == 'ProcessDuplicator');
      }
    );
  }

  public function init()
  {
    parent::init();

    if ($this->permissions->get('duplicator')->id && !$this->user->hasPermission('duplicator')) {
      throw new WirePermissionException(__('Duplicator: You have no permission to use this module.'));
    }

    $this->config->scripts->add($this->config->urls->{$this->className} . "Assets/lib/baffle.min.js");

    $this->dupmod = $this->modules->get(Duplicator::DUP_APPLICATION_NAME);

    $this->addHookAfter('Page::render', $this, 'styles');
  }

  protected function styles(HookEvent $event)
  {
    $page = $event->object;
    if (!($page->process == 'ProcessDuplicator')) return;
    $github = '<script async defer src="https://buttons.github.io/buttons.js"></script>';

    $event->return = str_replace("</head>", "\r\n$github</head>", $event->return);
  }

  public function ___execute()
  {
    $out  = $this->renderHead();
    $out .= $this->renderLog();
    $out .= $this->dialogBoxModal('delete-confirm', __('Confirm'), 'alert', __('This action will delete local packages.<br>All packages will be permanently deleted and cannot be recovered. Are you sure ?'));
    $out .= $this->dialogBoxModal('delete-confirm-single', __('Confirm'), 'alert', __('This package will be permanently deleted and cannot be recovered. Are you sure ?'));
    $out .= $this->dialogBoxModal('job-running', __('Info'), 'info', __('A job is already running. Please wait until it finish.'));

    $action = wire('sanitizer')->text(wire('input')->get->action);
    switch ($action) {
      case 'packages':
        $out .= $this->renderGetPackages();

        if (isset(wire('input')->get->service) && isset(wire('input')->get->file)) {
          switch (wire('sanitizer')->text(wire('input')->get->service)) {
            case 'dropbox':
              $dropbox = new \DropboxClient();
              $dropbox->setAccessToken($this->dupmod->dropboxAccessToken);
              $dropbox->setIdentifier("Duplicator/1");
              $dropbox->setFolder(Duplicator::DUP_APPLICATION_NAME);
              $dropbox->setQuery(Duplicator::DUP_PACKAGE_EXTENSION);
              $dropbox->setMimeType(Duplicator::DUP_PACKAGE_MIME_TYPE);
              $result = $dropbox->download('/' . wire('sanitizer')->filename(wire('input')->get->file), wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER);
              if ($result === true) {
                DUP_Logs::log("Dropbox: package " . wire('sanitizer')->filename(wire('input')->get->file) . " synchronized successfully\n");
              }
              break;

            case 'googledrive':
              $google = new GoogleDriveClient();
              $google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
              $google->setAppName(Duplicator::DUP_APPLICATION_NAME);
              $google->setGoogleKeyFile($this->dupmod->googleKeyFile);
              $google->connect();
              $file = $google->getPackage(wire('sanitizer')->filename(wire('input')->get->file), Duplicator::DUP_PACKAGE_MIME_TYPE, 0);
              $google->download($file, wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER . DS . $file[0]['name']);
              break;

            case 'amazon':
              $amazonaws = new \AmazonS3Client();
              $amazonaws->setAccessKey($this->dupmod->awsAccessKey);
              $amazonaws->setSecretKey($this->dupmod->awsSecretKey);
              $amazonaws->setRegion($this->dupmod->awsRegion);
              $amazonaws->setBucket($this->dupmod->awsBucketName);
              $amazonaws->download(wire('sanitizer')->filename(wire('input')->get->file), wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER . DS . wire('sanitizer')->filename(wire('input')->get->file));
              break;

            default:
              break;
          }
        } elseif (isset(wire('input')->get->file)) {
          $filename = wire('sanitizer')->filename(wire('input')->get->file);
          $packages = DUP_Util::getPackages($this->dupmod->path, Duplicator::DUP_PACKAGE_EXTENSION);
          if (in_array($filename, $packages)) {
            wireSendFile($this->dupmod->path . DS . $filename);
          }
        } elseif (isset(wire('input')->get->installer)) {
          $filename = wire('sanitizer')->filename(wire('input')->get->installer);
          $this->getInstaller($filename);
        }
        wire('session')->redirect(wire('page')->url);
        break;

      case 'delete':
        $out .= $this->renderGetPackages();
        if (isset(wire('input')->get->service) && isset(wire('input')->get->file)) {
          switch (wire('sanitizer')->text(wire('input')->get->service)) {
            case 'dropbox':
              $dropbox = new \DropboxClient();
              $dropbox->setAccessToken($this->dupmod->dropboxAccessToken);
              $dropbox->setFolder(Duplicator::DUP_APPLICATION_NAME);
              $dropbox->deleteFile(wire('sanitizer')->filename(wire('input')->get->file), Duplicator::DUP_APPLICATION_NAME);
              break;

            case 'googledrive':
              $google = new GoogleDriveClient();
              $google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
              $google->setAppName(Duplicator::DUP_APPLICATION_NAME);
              $google->setGoogleKeyFile($this->dupmod->googleKeyFile);
              $google->connect();
              $google->deleteFile(wire('sanitizer')->filename(wire('input')->get->file));
              break;

            case 'amazon':
              $amazonaws = new \AmazonS3Client();
              $amazonaws->setAccessKey($this->dupmod->awsAccessKey);
              $amazonaws->setSecretKey($this->dupmod->awsSecretKey);
              $amazonaws->setRegion($this->dupmod->awsRegion);
              $amazonaws->setBucket($this->dupmod->awsBucketName);
              $amazonaws->deleteFile(array(array('Key' => wire('sanitizer')->filename(wire('input')->get->file))));
              break;

            default:
              break;
          }
        } elseif (isset(wire('input')->get->file)) {
          $filename = wire('sanitizer')->filename(wire('input')->get->file);
          DUP_Util::deleteFile($this->dupmod->path . DS . $filename);
        }
        wire('session')->redirect(wire('page')->url);
        break;

      case 'deleteAll':
        DUP_Util::clean(Duplicator::getPath(), 0);

        $out .= $this->renderGetPackages();
        break;

      default:
        $out .= $this->renderGetPackages();
        break;
    }


    return $out;
  }

  /**
   * @param $filename
   */
  protected function generateInstaller($filename)
  {
    /**
     * TODO: {}
     * currently the installer is "universal"
     */
  }

  /**
   * @param $filename
   */
  protected function getInstaller($filename)
  {
    wireSendFile(wire('config')->paths->siteModules . Duplicator::DUP_APPLICATION_NAME . DS . 'Deploy' . DS . 'installer.php');
  }

  /**
   * @return string
   */
  protected function renderHead()
  {
    $modinfo = $this->modules->getModuleInfo('Duplicator');

    $modinfo = self::getModuleInfo();
    $out = "<div id='dup-head'>";
    $out .= "  <img id='dup-logo' src='" . wire('config')->urls->siteModules . Duplicator::DUP_APPLICATION_NAME . "/Assets/Duplicator-logo-xl-v2.png'>";
    $out .= "  <ul>";
    $out .= "	   <li><a title='Goto Support Thread' href='https://processwire.com/talk/topic/15345-duplicator-backup-and-move-sites/' target='_blank'><img src='" . wire('config')->urls->siteModules . Duplicator::DUP_APPLICATION_NAME . "/Assets/support.svg' class='dup-icon'><span class='dup-label'>Discussion</span></a></li>";
    $out .= "	   <li><a title='Goto Duplicator Settings' href='" . wire('config')->urls->httpAdmin . "module/edit?collapse_info=1&name=" . Duplicator::DUP_APPLICATION_NAME . "' target='_self'><img src='" . wire('config')->urls->siteModules . Duplicator::DUP_APPLICATION_NAME . "/Assets/settings.svg' class='dup-icon'><span class='dup-label'>Settings</span></a></li>";
    $out .= "  </ul>";
    $out .= "  <span class='dup-head-label dup-glitch animate-chars dup-version'> v{$modinfo['version']}</span>";
    $out .= "  <div class='dup-flex-r'>";
    $out .= "    <a class='dup-large dup-btn' href='https://processwire.com/talk/topic/15345-duplicator-backup-and-move-sites/' target='_blank' title='Like on ProcessWire modules directory'><i class='fa fa-heart social'></i> Like </a>";
    $out .= "    <a class='github-button' href='https://github.com/flydev-fr/Duplicator' data-icon='octicon-star' data-show-count='false' aria-label='Stargaze Duplicator on GitHub' data-size='large'>Star</a>";
    $out .= "    <a class='github-button' href='https://github.com/flydev-fr/Duplicator' data-show-count='false' aria-label='Documentation' data-size='large'>Doc</a>";
    $out .= "  </div>";
    $out .= "</div>";
    return $out;
  }

  /**
   * @return string
   */
  protected function renderLog()
  {
    $out = '';

    $fields = new InputfieldWrapper();

    $field = $this->modules->get('InputfieldTextarea');
    $field->label = __("Duplicator Log");
    $field->icon = 'history';
    $field->collapsed = Inputfield::collapsedYes;
    $field->attr(['id' => 'InputfieldLoglines', 'rows' => 8]);
    if (!file_exists($this->config->paths->logs . Duplicator::DUP_LOG_FILENAME . '.txt')) return '';
    $loglines = '';
    $key = $this->dupmod->lastPackageName;
    $ts = null;
    if ($key) {
      $datelog = basename($key, Duplicator::DUP_PACKAGE_EXTENSION);
      $parts = explode('-', $datelog);
      array_pop($parts);
      $datelog = implode('-', $parts);
      $ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $datelog);
    }
    if ($ts) {
      $from = array('from' => $ts->getTimestamp());
      foreach (wire('log')->getEntries(Duplicator::DUP_LOG_FILENAME, $from) as $entry) {
        $loglines .= $entry['date'] . ':  ' . $entry['text'] . "\n";
      }
    } else {
      foreach (wire('log')->getEntries(Duplicator::DUP_LOG_FILENAME) as $entry) {
        $loglines .= $entry['date'] . ':  ' . $entry['text'] . "\n";
      }
    }
    $field->value = $loglines;

    $fields->append($field);

    $out .= $fields->render();

    return $out;
  }

  /**
   * @return string
   */
  protected function renderGetPackages()
  {
    $out = '';
    $out .= $this->renderFilters();

    $table = wire('modules')->get("MarkupAdminDataTable");
    $table->setID('packagesDataTable');
    $table->setSortable(true);
    $table->setResizable(false);
    $table->setEncodeEntities(false);
    $table->headerRow(array("Package Name", "Created", "Size", "Download/Sync", ""));
    $datas = $this->getPackagesDetails($this->dupmod->path, Duplicator::DUP_PACKAGE_EXTENSION);
    $numFiles = 0;
    if (count($datas)) {
      // sort the array by timestamps
      usort($datas, function ($a, $b) {
        return $a['time'] < $b['time'] ? 1 : -1;
      });
      // remove the column 'time' before its being rendered
      array_walk($datas, function (&$value) {
        unset($value['time']);
      });
      foreach ($datas as $data) {
        $table->row($data);
        $numFiles++;
      }
    }

    if (!$numFiles) $out .= "<h2>" . __('No package found.') . "</h2>";
    $out .= $table->render();

    $href = $this->config->urls->httpAdmin . 'setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME);

    $f = $this->modules->get('InputfieldButton');
    $f->attr('id+name', 'newPackage');
    $f->value = __('Backup Now');
    $f->icon = 'clone';
    $f->attr('data-action', $href . '/?action=backup_now');
    $f->attr('target', '_SELF');
    $f->addClass('head_button_clone');
    $out .= $f->render();

    $f = $this->modules->get('InputfieldButton');
    $f->attr('id+name', 'deletePackages');
    $f->value = __('Delete All');
    $f->icon = 'trash';
    $f->attr('data-action', $href . '/?action=deleteAll');
    $out .= $f->render();
    $out .= "<div id='out'></div>";

    return $out;
  }

  public function ___install()
  {
    parent::___install();
  }

  public function ___uninstall()
  {
    parent::___uninstall();
  }

  /**
   * @param $path
   * @param $extension
   * @return array|null
   */
  protected function getPackagesDetails($path, $extension)
  {
    $data = null;
    $rows = array();

    if (!empty($path) && is_readable($path) && $this->dupmod->useLocalFolder) {
      $files = glob($path . DS . "*." . Duplicator::DUP_PACKAGE_EXTENSION);
      if (count($files)) {
        foreach ($files as $file) {
          if ((strrpos($file, $extension) == false) || (strrpos($file, 'json'))) continue;
          $originalFilename = basename($file);
          $parts = explode('-', $originalFilename);
          array_pop($parts);
          // $tsstr = implode('-', $parts);
          $tsstr = substr($originalFilename, 0, 19); // ATO
          $ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
          if ($ts) {
            $createdOn = ($ts === false) ? 'invalid timestamp' : wireRelativeTimeStr($ts->getTimestamp());

            $dataAction = $this->config->urls->httpAdmin . 'setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
            $href1 = '<a href="?action=packages&installer=' . $originalFilename . '" class="btnlink" title="Download and run this php file to install the package."><i class="fa fa-bolt"></i> Installer</a>';
            $href2 = '<a href="?action=packages&file=' . $originalFilename . '" class="btnlink" title="Download and put it in the webroot alongside installer.php"><i class="fa fa-download"></i> Package</a>';
            $href3 = '<a href="?action=delete&file=' . $originalFilename . '" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

            $data = array(
              'time' => $ts->getTimestamp(),
              "<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/localfolder-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
              $createdOn,
              DUP_Util::human_filesize(filesize($path . DS . $originalFilename)),
              $href1 . ' ' . $href2 . ' ',
              $href3
            );
            array_push($rows, $data);
          }
        }
      }
    }

    // Dropbox
    if ($this->dupmod->useDropbox == 1) {
      try {
        $dropbox = new \DropboxClient();
        $dropbox->setAccessToken($this->dupmod->dropboxAccessToken);
        $files = $dropbox->getFiles();
        DUP_Logs::log("Dropbox: found " . count($files) . " packages");
        if (count($files)) {
          foreach ($files as $file) {
            if (strrpos($file['name'], $extension) == false) continue;
            $originalFilename = $file['name'];
            $parts = explode('-', $file['name']);
            array_pop($parts);
            $tsstr = implode('-', $parts);
            $ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
            $createdOn = ($ts === false) ? 'invalid timestamp' : wireRelativeTimeStr($ts->getTimestamp());
            $dataAction = $this->config->urls->httpRoot . str_replace('/', '', $this->config->urls->admin) . '/setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
            $href1 = '<a href="?action=packages&installer=' . $originalFilename . '" class="btnlink"><i class="fa fa-bolt"></i> Installer</a>';
            $href2 = '<a href="?action=packages&file=' . $originalFilename . '&service=dropbox" class="btnlink" title="Synchronize the package from the Cloud to your Server."><i class="fa fa-cloud-download"></i> Sync</a>';
            $href3 = '<a href="?action=delete&file=' . $file['name'] . '&service=dropbox" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

            $data = array(
              'time' => $ts->getTimestamp(),
              "<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/dropbox-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
              $createdOn,
              DUP_Util::human_filesize($file['size']),
              $href1 . ' ' . $href2 . ' ',
              $href3
            );
            array_push($rows, $data);
          }
        }
      } catch (\Exception $ex) {
        DUP_Logs::log("Dropbox error: " . $ex->getMessage(), 'error');
      }
    }

    // GoogleDrive
    if ($this->dupmod->useGoogleDrive == 1) {
      try {
        $google = new GoogleDriveClient();
        $google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
        $google->setAppName(Duplicator::DUP_APPLICATION_NAME);
        $google->setGoogleKeyFile($this->dupmod->googleKeyFile);
        $google->connect();
        $files = $google->getFiles();
        $cntFiles = $files !== null ? count($files) : 0;
        DUP_Logs::log("GoogleDrive: found " . $cntFiles . " packages");
        if ($cntFiles) {
          foreach ($files as $file) {
            if (strrpos($file['name'], $extension) == false) continue;
            $originalFilename = $file['name'];
            $parts = explode('-', $file['name']);
            array_pop($parts);
            $tsstr = implode('-', $parts);
            $ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
            $createdOn = ($ts === false) ? 'invalid timestamp' : wireRelativeTimeStr($ts->getTimestamp());
            $dataAction = $this->config->urls->httpRoot . str_replace('/', '', $this->config->urls->admin) . '/setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
            $href1 = '<a href="?action=packages&installer=' . $originalFilename . '" class="btnlink"><i class="fa fa-bolt"></i> Installer</a>';
            $href2 = '<a href="?action=packages&file=' . $originalFilename . '&service=googledrive" class="btnlink" title="Synchronize the package from the Cloud to your Server."><i class="fa fa-cloud-download"></i> Sync</a>';
            $href3 = '<a href="?action=delete&file=' . $file['id'] . '&service=googledrive" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

            $data = array(
              'time' => $ts->getTimestamp(),
              "<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/google_drive-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
              $createdOn,
              DUP_Util::human_filesize($file['size']),
              $href1 . ' ' . $href2 . ' ',
              $href3
            );
            array_push($rows, $data);
          }
        }
      } catch (\Exception $ex) {
        DUP_Logs::log("GoogleDrive error: " . $ex->getMessage(), 'error');
      }
    }

    // AmazonS3
    if ($this->dupmod->useAmazonS3 == 1) {
      try {
        $amazonaws = new AmazonS3Client();
        $amazonaws->setAccessKey($this->dupmod->awsAccessKey);
        $amazonaws->setSecretKey($this->dupmod->awsSecretKey);
        $amazonaws->setRegion($this->dupmod->awsRegion);
        $amazonaws->setBucket($this->dupmod->awsBucketName);
        $files = $amazonaws->getFiles();

        if (count($files)) {
          foreach ($files as $file) {
            if (strrpos($file['Key'], $extension) == false) continue;
            $originalFilename = $file['Key'];
            $parts = explode('-', $file['Key']);
            array_pop($parts);
            $tsstr = implode('-', $parts);
            $ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
            $createdOn = ($ts === false) ? 'invalid timestamp' : wireRelativeTimeStr($ts->getTimestamp());
            $dataAction = $this->config->urls->httpRoot . str_replace('/', '', $this->config->urls->admin) . '/setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
            $href1 = '<a href="?action=packages&installer=' . $originalFilename . '" class="btnlink"><i class="fa fa-bolt"></i> Installer</a>';
            $href2 = '<a href="?action=packages&file=' . $originalFilename . '&service=amazon" class="btnlink" title="Synchronize the package from the Cloud to your Server."><i class="fa fa-cloud-download"></i> Sync</a>';
            $href3 = '<a href="?action=delete&file=' . $file['Key'] . '&service=amazon" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

            $data = array(
              'time' => $ts->getTimestamp(),
              "<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/amazon-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
              $createdOn,
              DUP_Util::human_filesize($file['Size']),
              $href1 . ' ' . $href2 . ' ',
              $href3
            );
            array_push($rows, $data);
          }
        }
      } catch (AmazonS3ClientException $ex) {
        DUP_Logs::log("AmazonS3 error: " . $ex->getMessage(), 'error');
      }
    }

    return array_reverse($rows);
  }


  /**
   * @return string
   */
  protected function renderFilters()
  {

    $out = "
			<div class='adminDataTableMenu'>
				
					<button id='btnSortByName' class='ui-button ui-widget ui-corner-all ui-state-default ui-priority-secondary'>" . __("Sort by Name") . "</button>
				
			</div>
		";


    return $out;
  }

  /**
   * @param $id
   * @param $title
   * @param $icon
   * @param $body
   * @return string
   */
  protected function dialogBoxModal($id, $title, $icon, $body)
  {
    $out = "
    <div id='$id' class='modal-confirm' title='$title'>
			<p><span class='ui-icon ui-icon-$icon' style='float:left; margin:12px 12px 20px 0;'></span>$body</p>
		</div>
    ";

    return $out;
  }
}
